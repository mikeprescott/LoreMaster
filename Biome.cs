//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using System;
using System.Collections;
using System.IO;


namespace Generation {
	public class Biome {
		
		public Seed seed = new Seed();
		private string BiomeType = "Grassland";
		private string BiomeShape = "Square";
		private int DungeonLevel = 0;

		public int SectionLength = 32;

		public Section[] Sections= new Section[4];
		public int [,] Grid; //The int in Grid is the tile number
		public Gate[] Gates = new Gate[0];


		public int SectionCounter = 0;

		public Biome(int DL, string input) {
			seed.CreateSeed("Biome_" + DL.ToString() + input);

			SetDungeonLevel(DL);

			switch(seed.Ran (16)){
			case 1:
			case 2:
				SetShape("Long");
				break;
			case 3:
			case 4:
				SetShape("Tall");
				break;
			default:
				SetShape("Square");	
				break;		
			}
			
			switch(seed.Ran (3,4)){
			case 1:
				SetBiomeType("Marsh");
				break;
			case 2:
				SetBiomeType("Desert");
				break;
			default:
				SetBiomeType("Grassland");
				break;			
			}
		}
		
		//BIOME TYPE
		public string GetBiomeType(){
			return BiomeType;
		}
		public void SetBiomeType( string NewType ){
			BiomeType = NewType;
		}
		
		//BIOME SHAPE
		public string GetShape(){
			return BiomeShape;
		}
		public void SetShape( string NewShape ){
			if(NewShape == "Tall"){
				Grid = new int[SectionLength * 4, SectionLength];
			}else if(NewShape == "Long"){
				Grid = new int[SectionLength, SectionLength * 4];			
			}else {
				Grid = new int[SectionLength * 2, SectionLength * 2];
			}
			BiomeShape = NewShape;
		}

		//DUNGEON LEVEL
		public int GetDungeonLevel(){
			return DungeonLevel;
		}
		public void SetDungeonLevel( int NewDungeonLevel ){
			DungeonLevel = NewDungeonLevel;
		}


		//Grid Development
		public void NeutralizeMap(){			
			for (int x = 0; x < Grid.GetLength(0); x++) {
				for (int y = 0; y < Grid.GetLength(1); y++) {
					Grid[x, y] = 1; //Grass
				}
			}
		}

		public void PlotBorders(){			
			for (int x = 0; x < Grid.GetLength(0); x++) {
				for (int y = 0; y < Grid.GetLength(1); y++) {
					if(x == 0 || x == Grid.GetLength(0)-1 || y == 0 || y == Grid.GetLength(1)-1){
						Grid[x, y] = 2; //Wall
					}
				}
			}
		}

		public void PlotGates(){
			Gate NewGate = new Gate ();
			for (int s = 0; s < Sections.GetLength(0); s++) {
				if(Sections[s].North.Biome >= 0 && Sections[s].North.Biome != DungeonLevel){
					//North Gate on this Section.
					NewGate.x1 = SectionX(s) + 15;
					NewGate.y1 = SectionY(s);
					NewGate.x2 = SectionX(s) + 16;
					NewGate.y2 = SectionY(s);

					if(Sections[s].North.Biome > DungeonLevel){
						NewGate.HigherLevel = Sections[s].North.Biome;
					}else{
						NewGate.HigherLevel = DungeonLevel;
					}

					Grid[NewGate.x1, NewGate.y1] = 3; //Gate
					Grid[NewGate.x2, NewGate.y2] = 3; //Gate

					AddGate(NewGate);
				}
				if(Sections[s].East.Biome >= 0 && Sections[s].East.Biome != DungeonLevel){
					//East Gate on this Section.

					NewGate.x1 = SectionX(s) + SectionLength - 1;
					NewGate.y1 = SectionY(s) + 15;
					NewGate.x2 = SectionX(s) + SectionLength - 1;
					NewGate.y2 = SectionY(s) + 16;
					
					if(Sections[s].North.Biome > DungeonLevel){
						NewGate.HigherLevel = Sections[s].North.Biome;
					}else{
						NewGate.HigherLevel = DungeonLevel;
					}
					
					Grid[NewGate.x1, NewGate.y1] = 3; //Gate
					Grid[NewGate.x2, NewGate.y2] = 3; //Gate
					
					AddGate(NewGate);
				}
				if(Sections[s].South.Biome >= 0 && Sections[s].South.Biome != DungeonLevel){
					//South Gate on this Section.
					NewGate.x1 = SectionX(s) + 15;
					NewGate.y1 = SectionY(s) + SectionLength - 1;
					NewGate.x2 = SectionX(s) + 15;
					NewGate.y2 = SectionY(s) + SectionLength - 1;
					
					if(Sections[s].North.Biome > DungeonLevel){
						NewGate.HigherLevel = Sections[s].North.Biome;
					}else{
						NewGate.HigherLevel = DungeonLevel;
					}
					
					Grid[NewGate.x1, NewGate.y1] = 3; //Gate
					Grid[NewGate.x2, NewGate.y2] = 3; //Gate
					
					AddGate(NewGate);
				}
				if(Sections[s].West.Biome >= 0 && Sections[s].West.Biome != DungeonLevel){
					//West Gate on this Section.
					NewGate.x1 = SectionX(s);
					NewGate.y1 = SectionY(s) + 15;
					NewGate.x2 = SectionX(s);
					NewGate.y2 = SectionY(s) + 16;
					
					if(Sections[s].North.Biome > DungeonLevel){
						NewGate.HigherLevel = Sections[s].North.Biome;
					}else{
						NewGate.HigherLevel = DungeonLevel;
					}
					
					Grid[NewGate.x1, NewGate.y1] = 3; //Gate
					Grid[NewGate.x2, NewGate.y2] = 3; //Gate
					
					AddGate(NewGate);
				}
			}
		}


		//---------------
		//Sections
		public int SectionY(int SectionIndex){
			int Y = 0;
			if(BiomeShape == "Tall"){
				Y = 0;
			}else if(BiomeShape == "Long"){
				Y = SectionLength * SectionIndex;			
			}else {
				if(SectionIndex >= 2){
					Y = SectionLength * (SectionIndex - 2);
				}else{
					Y = SectionLength * SectionIndex;
				}
			}
			return Y;
		}

		public int SectionX(int SectionIndex){
			int X = 0;
			if(BiomeShape == "Tall"){
				X = SectionLength * SectionIndex;
			}else if(BiomeShape == "Long"){
				X = 0;
			}else {
				if(SectionIndex >= 2){
					X = SectionLength;
				}else{
					X = 0;
				}
			}
			return X;
		}


		private void AddGate(Gate NewGate){
			Gate[] NewGates = new Gate[Gates.GetLength(0)+1];
			for (int i = 0; i < Gates.GetLength(0); i++) {
				NewGates[i] = Gates[i];
			}
			NewGates[Gates.GetLength(0)] = NewGate;

			Gates = NewGates;
		}
	}
}

